# 1.5.0 
# –î–æ–±–∞–≤–ª–µ–Ω –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–ø–µ—á–∞—Ç–æ–∫ 
# –î–æ–±–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ json —Ñ–∞–π–ª 

# –ï—Å—Ç—å –ª–∏—à–Ω–∏–π –∫–æ–¥ –∏–ª–∏ —á–∞—Å—Ç—å –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
# –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞ –∏–ª–∏ –≤—ã–¥–∏–ª—è–µ–º–æ—Å—Ç—å –∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–º —Ç–µ–∫—Å—Ç–∞–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

import json
import os
import shutil
import PyPDF2
from pathlib import Path
from collections import defaultdict, Counter
from send2trash import send2trash
import re

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
MODE = "test"  # "work"

if MODE == "work":
    STATS_FILE = Path(r"C:\Users\Arhivskaner\Desktop\Akbulak_stats.txt")
    BASE_ROOT = Path(r"C:\Users\Arhivskaner\Desktop\1–ú–∫—Ä –°–∂–∞—Ç—ã–π\1-1")
else:
    STATS_FILE = Path(r"C:\Users\Arhivskaner\Desktop\TEST_statistic.txt")
    BASE_ROOT = Path(r"C:\Users\Arhivskaner\Desktop\1–ú–∫—Ä –°–∂–∞—Ç—ã–π\–¥–ª—è —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–æ–≤\test")

flat_number = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: "))
flat_id = f"1–º–∫—Ä–ê–∫–±—É–ª–∞–∫1–¥{flat_number}–∫–≤"
BASE_DIR = BASE_ROOT / f"{flat_id}_001.pdf"

removed_unneeded_count = 0
OUTPUT_DIR = BASE_DIR / "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"
OUTPUT_DIR.mkdir(exist_ok=True)

NAMES_MAP_FILE = "names_map.json"

if os.path.exists(NAMES_MAP_FILE):
    with open(NAMES_MAP_FILE, "r", encoding="utf-8") as f:
        name_map = json.load(f)
else:
    name_map = {}

def add_new_name(new_name):
    new_id = max(name_map.values(), key=lambda x: x['id'])['id'] + 1 if name_map else 1
    name_map[new_name] = {
        "id": new_id,
        "label": new_name,
        "aliases": []
    }
    with open(NAMES_MAP_FILE, "w", encoding="utf-8") as f:
        json.dump(name_map, f, ensure_ascii=False, indent=4)
    print(f"üîë –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '{new_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫!")

record_stats = True
if STATS_FILE.exists():
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        if flat_id in f.read():
            print(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è: {flat_id}. –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            record_stats = False

def normalize_filename(name):
    return re.sub(r' \(\d+\)', '', name)

grouped_files = defaultdict(list)
skipped_names = []

for file in BASE_DIR.glob("*.pdf"):
    base_name = normalize_filename(file.stem)
    if base_name.strip() == "-":
        print(f"üöÆ –£–¥–∞–ª—ë–Ω –Ω–µ–Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏): {file.name}")
        send2trash(str(file))
        removed_unneeded_count += 1
        continue
    grouped_files[base_name].append(file)

for base_name, files in grouped_files.items():
    if len(files) == 1:
        single_file = files[0]
        destination = OUTPUT_DIR / single_file.name
        shutil.copy2(single_file, destination)
        send2trash(str(single_file))
        print(f"–ü–µ—Ä–µ–º–µ—â—ë–Ω –±–µ–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {single_file.name}")
    else:
        merger = PyPDF2.PdfMerger()
        for pdf_path in sorted(files):
            merger.append(str(pdf_path))
        output_file = OUTPUT_DIR / f"{base_name}.pdf"
        merger.write(str(output_file))
        merger.close()
        for pdf_path in files:
            send2trash(str(pdf_path))
        print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {base_name} ‚Üí {output_file.name}")

    if base_name not in name_map:
        print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {base_name}")
        response = input("–î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω (–µ—Å–ª–∏ —Ç—É—Ç –æ–ø–µ—á–∞—Ç–∫–∞ –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –≤—ã–±–µ—Ä–∏—Ç–µ 'n')? (y/n): ").strip().lower()

        if response == 'y':
            add_new_name(base_name)
        else:
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ '{base_name}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –æ–ø–µ—á–∞—Ç–∫–∞ –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è.")
            while True:
                choice = input("–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–π—á–∞—Å (y), –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (s), –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ (a)? ").strip().lower()

                if choice == 'y':
                    try:
                        original_id = int(input("–£–∫–∞–∂–∏—Ç–µ id –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: ").strip())
                        if original_id in [data["id"] for data in name_map.values()]:
                            for name, data in name_map.items():
                                if data["id"] == original_id:
                                    data.setdefault("aliases", []).append(base_name)
                                    print(f"‚úÖ '{base_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∫ '{data['label']}' (ID {original_id})")
                                    break
                            break
                        else:
                            print("‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

                elif choice == 'a':
                    add_new_name(base_name)
                    break
                elif choice == 's':
                    print(f"‚è≠Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ '{base_name}' –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                    skipped_names.append(base_name)
                    break
                else:
                    print("–í–≤–µ–¥–∏—Ç–µ 'y', 'a' –∏–ª–∏ 's'.")

# === –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π ===
if skipped_names:
    print("\nüìå –í—ã —Ä–∞–Ω–µ–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:")
    for skipped in skipped_names:
        print(f" - {skipped}")
    print("–•–æ—Ç–∏—Ç–µ —Å–µ–π—á–∞—Å –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?")

    for skipped in skipped_names:
        print(f"\nüîÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {skipped}")
        while True:
            choice = input("–£–∫–∞–∑–∞—Ç—å ID –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (y), –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ (a), –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ (s): ").strip().lower()
            if choice == 'y':
                try:
                    original_id = int(input("–£–∫–∞–∂–∏—Ç–µ id –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: ").strip())
                    if original_id in [data["id"] for data in name_map.values()]:
                        for name, data in name_map.items():
                            if data["id"] == original_id:
                                data.setdefault("aliases", []).append(skipped)
                                print(f"‚úÖ '{skipped}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∫ '{data['label']}' (ID {original_id})")
                                break
                        break
                    else:
                        print("‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            elif choice == 'a':
                add_new_name(skipped)
                break
            elif choice == 's':
                print(f"‚è≠Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ '{skipped}' —Å–Ω–æ–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                break
            else:
                print("–í–≤–µ–¥–∏—Ç–µ 'y', 'a' –∏–ª–∏ 's'.")

with open(NAMES_MAP_FILE, "w", encoding="utf-8") as f:
    json.dump(name_map, f, ensure_ascii=False, indent=4)

# === –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
if record_stats:
    local_counter = Counter()
    for base_name, files in grouped_files.items():
        if base_name.strip() == "-":
            continue
        local_counter[base_name] += len(files)

    total_docs = sum(local_counter.values())

    with open(STATS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{flat_id} –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}\n")
        for name, count in local_counter.items():
            percent = round(count / total_docs * 100)
            f.write(f"  - {name}: {count} ({percent}%)\n")

        if removed_unneeded_count > 0:
            f.write(f"–£–¥–∞–ª—ë–Ω–Ω—ã—Ö –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {removed_unneeded_count}\n")

        f.write("===\n")

print("‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ PDF-—Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
