# v1.5.6 
# –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã

import json
import os
import shutil
import PyPDF2
from pathlib import Path
from collections import defaultdict, Counter
from send2trash import send2trash
import re
from colorama import Fore, Style, init # type: ignore
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
init(autoreset=True)
open("log.txt", "w").close()

# ====================== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ======================
LOG_FILE = "log.txt"
logger = logging.getLogger("AutoRegisterLogger")
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(console_handler)
# =================== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ï–¶ ===================

# ========================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===========================
MODE = "work"  
if MODE == "work":
    BASE_ROOT = Path(r"C:\Users\Arhivskaner\Desktop\1–ú–∫—Ä –°–∂–∞—Ç—ã–π\Test")
else:
    BASE_ROOT = Path(r"C:\Users\ladsp\Desktop\AutoRegisterDocs\test")

flat_number = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: "))
flat_id = f"1–º–∫—Ä–ê–∫–±—É–ª–∞–∫4–¥{flat_number}–∫–≤_001.pdf"
BASE_DIR = BASE_ROOT / flat_id

if not BASE_DIR.exists():
    logger.error(Fore.RED + f"‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {BASE_DIR}")
    exit(1)

OUTPUT_DIR = BASE_DIR / "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"
NAMES_MAP_FILE = "names_map.json"

# ======================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞ =========================

# ======================= –†–ê–ë–û–¢–ê –° –ö–ê–†–¢–û–ô –ò–ú–Å–ù ========================
logger.info(Fore.CYAN + "üìö –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –∏–º–µ–Ω...")
def build_alias_map(name_map):
    alias_to_main = {}
    for main_name, data in name_map.items():
        for alias in data.get("aliases", []):
            alias_to_main[alias] = main_name
    return alias_to_main

def add_new_name(new_name):
    new_id = max((x['id'] for x in name_map.values()), default=0) + 1
    name_map[new_name] = {"id": new_id, "label": new_name, "aliases": []}
    with open(NAMES_MAP_FILE, "w", encoding="utf-8") as f:
        json.dump(name_map, f, ensure_ascii=False, indent=4)
    logger.info(Fore.GREEN + f"üîë –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '{new_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫!")

if os.path.exists(NAMES_MAP_FILE):
    with open(NAMES_MAP_FILE, "r", encoding="utf-8") as f:
        name_map = json.load(f)
else:
    name_map = {}

alias_to_main = build_alias_map(name_map)
# ====================== –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π –∏–º—ë–Ω –æ–∫–æ–Ω—á–µ–Ω–∞ ======================

# ========================= –†–ê–ë–û–¢–ê –° PDF-–§–ê–ô–õ–ê–ú–ò =========================
logger.info(Fore.CYAN + "üìÑ –†–∞–±–æ—Ç–∞ —Å PDF-—Ñ–∞–π–ª–∞–º–∏...")
def normalize_filename(name):
    return re.sub(r' \(\d+\)', '', name)

grouped_files = defaultdict(list)
skipped_names = []

for file in BASE_DIR.glob("*.pdf"):
    if file.parent == OUTPUT_DIR:
        continue

    base_name = normalize_filename(file.stem)
    if base_name.strip() == "-":
        logger.info(Fore.RED + f"üöÆ –£–¥–∞–ª—ë–Ω –Ω–µ–Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏): {file.name}")
        send2trash(str(file))
        continue

    if base_name in alias_to_main:
        real_name = alias_to_main[base_name]
        logger.info(Fore.YELLOW + f"üîÑ –ù–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è '{base_name}', –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ '{real_name}'")
        base_name = real_name

    grouped_files[base_name].append(file)

for base_name, files in grouped_files.items():
    if base_name not in name_map:
        logger.info(Fore.YELLOW + f"‚õîÔ∏è‚ûûÔ∏è –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {base_name}")
        response = input("–î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω (y/n)? ").strip().lower()
        if response == 'y':
            add_new_name(base_name)
        else:
            logger.info(Fore.RED + f"‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ '{base_name}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω–æ–µ –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ.")
            while True:
                choice = input("–£–∫–∞–∑–∞—Ç—å ID –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (y), –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (s), –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ (a)? ").strip().lower()
                if choice == 'y':
                    try:
                        original_id = int(input("–£–∫–∞–∂–∏—Ç–µ id: ").strip())
                        found = False
                        for name, data in name_map.items():
                            if data["id"] == original_id:
                                data.setdefault("aliases", []).append(base_name)
                                alias_to_main = build_alias_map(name_map)
                                base_name = alias_to_main.get(base_name, base_name)
                                logger.info(Fore.GREEN + f"‚úÖ '{base_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∫ '{data['label']}'")
                                found = True
                                break
                        if found:
                            break
                        else:
                            logger.info(Fore.RED + "‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    except ValueError:
                        logger.info(Fore.RED + "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                elif choice == 'a':
                    add_new_name(base_name)
                    break
                elif choice == 's':
                    logger.info(Fore.YELLOW + f"‚è≠Ô∏è '{base_name}' –ø—Ä–æ–ø—É—â–µ–Ω.")
                    skipped_names.append(base_name)
                    break
                else:
                    print("–í–≤–µ–¥–∏—Ç–µ 'y', 'a' –∏–ª–∏ 's'.")

    if base_name in alias_to_main:
        base_name = alias_to_main[base_name]

    if len(files) == 1:
        single_file = files[0]
        destination = OUTPUT_DIR / f"{base_name}.pdf"
        shutil.copy2(single_file, destination)
        send2trash(str(single_file))
        logger.info(Fore.GREEN + f"üóπ –ü–µ—Ä–µ–º–µ—â—ë–Ω: {single_file.name} ‚Üí {destination.name}")
    else:
        merger = PyPDF2.PdfMerger()
        for pdf_path in sorted(files):
            merger.append(str(pdf_path))
        output_file = OUTPUT_DIR / f"{base_name}.pdf"
        merger.write(str(output_file))
        merger.close()
        for pdf_path in files:
            send2trash(str(pdf_path))
        logger.info(Fore.GREEN + f"üó∏ –û–±—ä–µ–¥–∏–Ω—ë–Ω–æ: {base_name} ‚Üí {output_file.name}")
# ======================= –†–∞–±–æ—Ç–∞ —Å PDF-—Ñ–∞–π–ª–∞–º–∏ –æ–∫–æ–Ω—á–µ–Ω–∞ =======================

# ======================== –ü–û–í–¢–û–†–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ò–ú–Å–ù ========================
logger.info(Fore.CYAN + "‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º—ë–Ω...")
if skipped_names:
    print("\nüìå –í—ã —Ä–∞–Ω–µ–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:")
    for skipped in skipped_names:
        print(f" - {skipped}")
    for skipped in skipped_names:
        print(f"\nüîÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {skipped}")
        while True:
            choice = input("–£–∫–∞–∑–∞—Ç—å ID –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (y), –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ (a), –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ (s): ").strip().lower()
            if choice == 'y':
                try:
                    original_id = int(input("–£–∫–∞–∂–∏—Ç–µ id –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: ").strip())
                    found = False
                    for name, data in name_map.items():
                        if data["id"] == original_id:
                            data.setdefault("aliases", []).append(skipped)
                            logger.info(Fore.GREEN + f"‚úÖ '{skipped}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∫ '{data['label']}' (ID {original_id})")
                            found = True
                            break
                    if found:
                        break
                    else:
                        logger.info(Fore.RED + "‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except ValueError:
                    logger.info(Fore.RED + "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            elif choice == 'a':
                add_new_name(skipped)
                break
            elif choice == 's':
                logger.info(Fore.YELLOW + f"‚è≠Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ '{skipped}' —Å–Ω–æ–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                break
            else:
                print("–í–≤–µ–¥–∏—Ç–µ 'y', 'a' –∏–ª–∏ 's'.")
# ====================== –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º—ë–Ω –æ–∫–æ–Ω—á–µ–Ω–∞ ======================
logger.info(Fore.GREEN + "üåü –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ PDF-—Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
logger.info(Fore.CYAN + f"==============================={flat_number}===============================")
