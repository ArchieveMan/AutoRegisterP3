# 1.4.8 
# –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 
# –∏–∑–º–µ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞


import re
import shutil
import PyPDF2
from pathlib import Path
from collections import defaultdict, Counter
from send2trash import send2trash


# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
MODE = "test"  #"prod"

if MODE == "":
    STATS_FILE = Path(r"C:\Users\Arhivskaner\Desktop\Akbulak_stats.txt")
    BASE_ROOT = Path(r"C:\Users\Arhivskaner\Desktop\1–ú–∫—Ä –°–∂–∞—Ç—ã–π\1-1")
else:
    STATS_FILE = Path(r"C:\Users\Arhivskaner\Desktop\TEST_statistic.txt")
    BASE_ROOT = Path(r"C:\Users\Arhivskaner\Desktop\1–ú–∫—Ä –°–∂–∞—Ç—ã–π\–¥–ª—è —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–æ–≤\test")

flat_number = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: "))
flat_id = f"1–º–∫—Ä–ê–∫–±—É–ª–∞–∫1–¥{flat_number}–∫–≤"
BASE_DIR = BASE_ROOT / f"{flat_id}_001.pdf"

removed_unneeded_count = 0 
# –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
OUTPUT_DIR = BASE_DIR / "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"
OUTPUT_DIR.mkdir(exist_ok=True)

def normalize_filename(name):
    return re.sub(r' \(\d+\)', '', name)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
record_stats = True
if STATS_FILE.exists():
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        if flat_id in f.read():
            print(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è: {flat_id}. –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            record_stats = False

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º PDF-—Ñ–∞–π–ª—ã
grouped_files = defaultdict(list)

for file in BASE_DIR.glob("*.pdf"):
    base_name = normalize_filename(file.stem)

    if base_name.strip() == "-":
        print(f"üöÆ –£–¥–∞–ª—ë–Ω –Ω–µ–Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏): {file.name}")
        send2trash(str(file))
        removed_unneeded_count += 1
        continue

    grouped_files[base_name].append(file)

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–∞–π–ª—ã
for base_name, files in grouped_files.items():
    if len(files) == 1:
        single_file = files[0]
        destination = OUTPUT_DIR / single_file.name
        shutil.copy2(single_file, destination)
        send2trash(str(single_file)) 
        print(f"–ü–µ—Ä–µ–º–µ—â—ë–Ω –±–µ–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {single_file.name}")
    else:
        merger = PyPDF2.PdfMerger()
        for pdf_path in sorted(files):
            merger.append(str(pdf_path))
        output_file = OUTPUT_DIR / f"{base_name}.pdf"
        merger.write(str(output_file))
        merger.close()
        for pdf_path in files:
            send2trash(str(pdf_path))
        print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {base_name} ‚Üí {output_file.name}")

print("‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ PDF-—Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

# === –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
if record_stats:
    local_counter = Counter()
    for base_name, files in grouped_files.items():
        if base_name.strip() == "-":
            continue
        local_counter[base_name] += len(files)

    total_docs = sum(local_counter.values())

    with open(STATS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{flat_id} –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}\n")
        for name, count in local_counter.items():
            percent = round(count / total_docs * 100)
            f.write(f"  - {name}: {count} ({percent}%)\n")
        
        if removed_unneeded_count > 0:
            f.write(f"–£–¥–∞–ª—ë–Ω–Ω—ã—Ö –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {removed_unneeded_count}\n")

        f.write("===\n")
